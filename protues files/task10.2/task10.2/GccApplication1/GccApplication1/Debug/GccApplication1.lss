
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dc  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074f  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  0000136b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <gpio_init>:
	OCR0A = 0;                                           // Set initial duty cycle to 0
}

void set_motor_speed(uint8_t speed)
{
	OCR0A = speed;
  90:	20 9a       	sbi	0x04, 0	; 4
  92:	38 98       	cbi	0x07, 0	; 7
  94:	50 98       	cbi	0x0a, 0	; 10
  96:	08 95       	ret

00000098 <adc_init>:
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  a4:	08 95       	ret

000000a6 <adc_read>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <adc_read+0x18>
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  cc:	08 95       	ret

000000ce <timer_init>:
  ce:	83 e8       	ldi	r24, 0x83	; 131
  d0:	84 bd       	out	0x24, r24	; 36
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	85 bd       	out	0x25, r24	; 37
  d6:	17 bc       	out	0x27, r1	; 39
  d8:	08 95       	ret

000000da <ext_interrupt_init>:
}

void ext_interrupt_init()
{
	EIMSK |= (1 << INT0);    // Enable external interrupt INT0
  da:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01);   // Trigger INT0 on falling edge (changed ISC010 to ISC01)
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	sei();                   // Enable global interrupts
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <__vector_1>:
}

ISR(INT0_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	encoder_count++;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <spi_init>:

void spi_init()
{
	DDRB |= (1 << DDB3) | (1 << DDB5); // MOSI and SCK as output
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	88 62       	ori	r24, 0x28	; 40
 11c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4);              // MISO as input
 11e:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI, Master mode, set clock rate fck/16
 120:	81 e5       	ldi	r24, 0x51	; 81
 122:	8c bd       	out	0x2c, r24	; 44
 124:	08 95       	ret

00000126 <spi_transfer>:
}

uint8_t spi_transfer(uint8_t data)
{
	SPDR = data;
 126:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <spi_transfer+0x2>
	;
	return SPDR;
 12e:	8e b5       	in	r24, 0x2e	; 46
}
 130:	08 95       	ret

00000132 <main>:

int main()
{
	gpio_init();
 132:	0e 94 48 00 	call	0x90	; 0x90 <gpio_init>
	adc_init();
 136:	0e 94 4c 00 	call	0x98	; 0x98 <adc_init>
	timer_init();
 13a:	0e 94 67 00 	call	0xce	; 0xce <timer_init>
	ext_interrupt_init();
 13e:	0e 94 6d 00 	call	0xda	; 0xda <ext_interrupt_init>
	spi_init();
 142:	0e 94 8c 00 	call	0x118	; 0x118 <spi_init>

	sei(); // Enable global interrupts
 146:	78 94       	sei

	while (1)
	{
		uint16_t pot_value = adc_read(0);

		uint8_t motor_speed = (pot_value * 255) / 1023;
 148:	0f ef       	ldi	r16, 0xFF	; 255
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d3 e0       	ldi	r29, 0x03	; 3
		set_motor_speed(motor_speed);

		uint8_t current_rpm = (encoder_count * 60) / 100; // Change scaling as needed
		encoder_count = 0;                                // Reset count for next calculation

		spi_transfer(current_rpm);
 14e:	1c e3       	ldi	r17, 0x3C	; 60

	sei(); // Enable global interrupts

	while (1)
	{
		uint16_t pot_value = adc_read(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>

		uint8_t motor_speed = (pot_value * 255) / 1023;
 156:	9c 01       	movw	r18, r24
 158:	02 9f       	mul	r16, r18
 15a:	c0 01       	movw	r24, r0
 15c:	03 9f       	mul	r16, r19
 15e:	90 0d       	add	r25, r0
 160:	11 24       	eor	r1, r1
 162:	be 01       	movw	r22, r28
 164:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__udivmodhi4>
	OCR0A = 0;                                           // Set initial duty cycle to 0
}

void set_motor_speed(uint8_t speed)
{
	OCR0A = speed;
 168:	67 bd       	out	0x27, r22	; 39
		uint16_t pot_value = adc_read(0);

		uint8_t motor_speed = (pot_value * 255) / 1023;
		set_motor_speed(motor_speed);

		uint8_t current_rpm = (encoder_count * 60) / 100; // Change scaling as needed
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
		encoder_count = 0;                                // Reset count for next calculation
 172:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

		spi_transfer(current_rpm);
 17a:	18 9f       	mul	r17, r24
 17c:	90 01       	movw	r18, r0
 17e:	19 9f       	mul	r17, r25
 180:	30 0d       	add	r19, r0
 182:	11 24       	eor	r1, r1
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	ab e7       	ldi	r26, 0x7B	; 123
 18e:	b4 e1       	ldi	r27, 0x14	; 20
 190:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	0e 94 93 00 	call	0x126	; 0x126 <spi_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	87 ea       	ldi	r24, 0xA7	; 167
 19e:	91 e6       	ldi	r25, 0x61	; 97
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x6e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x74>
 1a6:	00 00       	nop
 1a8:	d3 cf       	rjmp	.-90     	; 0x150 <main+0x1e>

000001aa <__udivmodhi4>:
 1aa:	aa 1b       	sub	r26, r26
 1ac:	bb 1b       	sub	r27, r27
 1ae:	51 e1       	ldi	r21, 0x11	; 17
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__udivmodhi4_ep>

000001b2 <__udivmodhi4_loop>:
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	a6 17       	cp	r26, r22
 1b8:	b7 07       	cpc	r27, r23
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__udivmodhi4_ep>
 1bc:	a6 1b       	sub	r26, r22
 1be:	b7 0b       	sbc	r27, r23

000001c0 <__udivmodhi4_ep>:
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	5a 95       	dec	r21
 1c6:	a9 f7       	brne	.-22     	; 0x1b2 <__udivmodhi4_loop>
 1c8:	80 95       	com	r24
 1ca:	90 95       	com	r25
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	08 95       	ret

000001d2 <__umulhisi3>:
 1d2:	a2 9f       	mul	r26, r18
 1d4:	b0 01       	movw	r22, r0
 1d6:	b3 9f       	mul	r27, r19
 1d8:	c0 01       	movw	r24, r0
 1da:	a3 9f       	mul	r26, r19
 1dc:	70 0d       	add	r23, r0
 1de:	81 1d       	adc	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	b2 9f       	mul	r27, r18
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
